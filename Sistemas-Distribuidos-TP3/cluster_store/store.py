from flask import Flask, request, render_template, jsonify # Framework web e utilit√°rios para requisi√ß√µes/respostas
import os       # Para acessar vari√°veis de ambiente (ex: nome do n√≥)
import requests # Para enviar requisi√ß√µes HTTP para outros n√≥s

# ==================== Variaveis do pr√≥prio n√≥ ====================

# Inicializa a aplica√ß√£o Flask
app = Flask(__name__)  

# Nome do n√≥ atual (definido via vari√°vel de ambiente, ex: NODE_NAME=db-1)
node_name = os.getenv("NODE_NAME", "undefined") + ".db"

# ==================== Variaveis do protocolo do cluster store ====================
# Lista dos n√≥s primarios
primary_nodes = [None] * 3
# Lista das flags dos primarios
is_primary = [None] * 3

# Defini√ß√£o dos n√≥s primarios: indice 0 = create, indice 1 = append, indice 2 = delete
if node_name == "db-0.db": # O servidor 0 come√ßa como prim√°rio da opera√ß√£o "create"
    is_primary[0] = True
else:
    is_primary[0] = False

if node_name == "db-1.db": # O servidor 1 come√ßa como prim√°rio da opera√ß√£o "append"
    is_primary[1] = True
else:
    is_primary[1] = False

if node_name == "db-2.db": # O servidor 2 come√ßa como prim√°rio da opera√ß√£o "delete"
    is_primary[2] = True
else:
    is_primary[2] = False
    
# Nome do servidor prim√°rio do cluster store
primary_nodes[0] = "db-0.db" # Prim√°rio de create = servidor 0
primary_nodes[1] = "db-1.db" # Prim√°rio de append = servidor 1
primary_nodes[2] = "db-2.db" # Prim√°rio de delete = servidor 2

# Lista de peers (outros n√≥s do cluster store), recebida via vari√°vel de ambiente PEERS
# Exemplo: PEERS=db-0,db-1,db-2
peer_list = os.getenv("PEERS", "").split(",")

print(f"[{node_name}] | Lista de peers --> {peer_list}", flush=True)

# Lista que representa o banco de dados dos clientes
clients_database = [""] * 5

# =================== ROTAS PARA O PROTOCOLO DE COMUNICACAO ===================

# Rota que atende as requisi√ß√µes de escrita do servidor-cliente. Recebe o nome do cliente e a mensagem que ser√° decodificada
@app.route("/write_request", methods=["POST"])
def write_request():
    global node_name, peer_list, primary_nodes, is_primary
    
    # Obtendo dados do cliente
    data            = request.json        # Extra√ß√£o da mensagem
    client_name     = data.get("node")    # Obtendo nome do cliente
    whole_message   = data.get("value")   # Obtendo mensagem completa enviada na request
    client_number   = int(client_name.split("-")[-1]) # Obtendo a posi√ß√£o do cliente no banco
    instruction     = whole_message[7:]  # Obtendo a string depois do comando
    new_client_string  = clients_database[client_number] # String que ser√° manipulada pelas opera√ß√µes. Come√ßa como sendo a √∫ltima modifica√ß√£o no banco de dados
    
    print(f"[Rota write_request] | [{node_name}] | üü° Recebeu pedido do cliente [{client_name}] | Atual estado do banco: '{clients_database[client_number]}'. Chamando prim√°rio...", flush=True)
    
    # Se o comando for create:
    if whole_message.startswith("create"):
        print(f"[Rota write_request] | [{node_name}] | Opera√ß√£o = create")
        
        new_client_string = instruction # Apenas troca a nova string pela antiga
        operation = 0 # Opera√ß√£o 0 = create
    
    # Se o comando for append:
    elif whole_message.startswith("append"):
        print(f"[Rota write_request] | [{node_name}] | Opera√ß√£o = append")
        
        new_client_string = clients_database[client_number] + instruction # Concatena a string nova ao final
        operation = 1 # Opera√ß√£o 0 = append
    
    # Se o comando for append: delete
    elif whole_message.startswith("delete"):
        print(f"[Rota write_request] | [{node_name}] | Opera√ß√£o = delete")
        
        # Retira da string antiga a substring enviada pelo cliente
        new_client_string = clients_database[client_number].replace(f"{instruction}", "")
        operation = 2 # Opera√ß√£o 0 = delete
            
    # Flag de controle do loop do protocolo de comunica√ß√£o
    success = False 
    while not success:
        # Variavel que determina qual n√≥ ser√° comunicado
        primary_to_contact = primary_nodes[operation]
        try:
            # Tenta contato com o prim√°rio conhecido
            requests.post(f"http://{primary_to_contact}:8080/write_primary", json={"client_name": client_name, "value": new_client_string}, timeout=1)

            # Se a resposta dele foi bem sucedida, altera a flag de controle do loop
            print(f"[Rota write_request] | [{node_name}] | üü¢ Recebeu confirma√ß√£o do servidor principal {primary_to_contact}\n", flush=True)
            success = True

        # Caso o prim√°rio tenha n√£o responda, elege um novo prim√°rio
        except requests.exceptions.RequestException as e: 
            print(f"[Rota write_request: Exception] | [{node_name}] | ‚ùå Erro {e} na conex√£o com o prim√°rio {primary_nodes[operation]} da opera√ß√£o '{operation}'. Convocando elei√ß√£o...", flush=True)
            
            # Envia o pedido de elei√ß√£o para todos os outros n√≥s que n√£o s√£o o primario. 
            # A lista √© atualizada na eleicao, por isso, o primario antigo nunca √© chamado
            for peer in peer_list:
                # Tenta falar com o n√≥
                try:
                    requests.get(f"http://{peer}:8080/elect_new_primary/{operation}", timeout=1)
                # Se n√£o conseguir imprime erro
                except requests.exceptions.RequestException:
                    print(f"[Rota write_request: Exception Exception] | [{node_name}] | ‚ùå Erro {e} ao falar com o servidor {peer}", flush=True)
                    
            print(f"[Rota write_request] | ‚öôÔ∏è Opera√ß√£o de elei√ß√£o terminada. Lista de peers atual --> {peer_list}", flush=True)

    # Retorna sucesso ao servidor-cliente
    return jsonify({"status": "COMMITED"}), 200


# Rota ativada somente no servidor prim√°rio. Controla a escrita do banco dentro dele mesmo e faz o pedido de escrita aos demais servidores
@app.route("/write_primary", methods=["POST"])
def write_primary():
    global node_name, peer_list, primary_nodes
    
    # Obtendo dados do cliente
    data             = request.json                 # Extra√ß√£o da mensagem
    client_name      = data.get("client_name")      # Obtendo nome do cliente
    new_value        = data.get("value")            # Obtendo mensagem do cliente
    client_number    = int(client_name.split("-")[-1]) # Obtendo a posi√ß√£o do cliente no banco

    print(f"[Rota write_primary] | [{node_name}] | ü§ë Acesso √† regi√£o cr√≠tica", flush=True)
    print(f"[Rota write_primary] | [{node_name}] | Cliente: [{client_name}] | Estado atual do banco: '{clients_database[client_number]}'", flush=True)

    # Atualizando o banco do cliente
    clients_database[client_number] = new_value

    print(f"[Rota write_primary] | [{node_name}] | üìù Atualiza√ß√£o das informa√ß√µes do cliente! | Novo estado do banco: '{clients_database[client_number]}'", flush=True)
        
    # Para cada peer, faz a solicita√ß√£o da escrita no banco deles
    for peer in peer_list:
        # N√£o manda para si pr√≥prio
        if peer == node_name:
            continue
        
        print(f"[Rota write_primary] | [{node_name}] | üîÑ Enviando pedido de atualiza√ß√£o para o {peer}", flush=True)
        # Tenta pedir ao outro n√≥ que atualize         
        try:
            requests.post(f"http://{peer}:8080/refresh_database", json={"name": client_name, "value": new_value}, timeout=1)

        # Caso n√£o seja poss√≠vel comunicar com o n√≥, convoca a elei√ß√£o de um novo n√≥
        except requests.exceptions.RequestException as e: 
            print(f"[Rota write_primary: Exception] | {node_name} | ‚ùå Erro {e} na conex√£o com o servidor {peer}",flush=True)
            operation = primary_nodes.index(peer) # Obtendo de qual opera√ß√†o o peer morto √© primario
            
            # Para cada peer dentro da lista que n√£o √© o peer morto (incluindo ele pr√≥prio), envia o pedido de elei√ß√£o
            for other_peers in peer_list:
                # N√£o envia para o peer cuja conex√£o falhou
                if other_peers == peer:
                    continue
                # Tenta chamar a elei√ß√†o para o peer
                try:
                    print(f"[Rota write_primary: Exception] | [{node_name}] | ‚ö†Ô∏è Notificando peer {other_peers}", flush=True)
                    requests.get(f"http://{other_peers}:8080/elect_new_primary/{operation}", timeout=1)
                # Caso n√£o consiga, imprime erro
                except requests.exceptions.RequestException:
                    print(f"[Rota write_primary: Rerfesh Exception Exception] | {node_name} | ‚ùå Erro {e} na conex√£o com o servidor {other_peers}", flush=True)
    print(f"",flush=True)
    
    # Retorna c√≥digo de sucesso
    return "", 200

# Rota que elege um novo n√≥ prim√°rio. A cada chamada, √© passada a opera√ß√£o que est√° sofrendo a troca de prim√°rios e o n√≥ que assume √© sempre o de maior n√∫mero
@app.route("/elect_new_primary/<int:operation>", methods=["GET"])
def elect_new_primary(operation):
    global is_primary, peer_list, primary_nodes
    
    # Realizando o cast da opera√ß√£o, por garantia
    operation = int(operation)

    # Opera√ß√£o 0 = create, 1 = append, 2 = delete
    if operation == 0:
        print(f"\n[Rota elect_new_primary] | [{node_name}] | üëë Elei√ß√£o para create!", flush=True)
    elif operation == 1:
        print(f"\n[Rota elect_new_primary] | [{node_name}] | üëë Elei√ß√£o para append!", flush=True)
    else:    
        print(f"\n[Rota elect_new_primary] | [{node_name}] | üëë Elei√ß√£o para delete!", flush=True)

    # Obten√ß√£o do prim√°rio que ser√° substitu√≠do (antigo)
    old_primary = primary_nodes[operation]
    print(f"[Rota elect_new_primary] | [{node_name}] | Nome do prim√°rio antigo --> {old_primary}", flush=True)

    # Remove o prim√°rio antigo da lista
    if old_primary in peer_list:
        peer_list.remove(old_primary)

    print(f"[Rota elect_new_primary] | [{node_name}] | √çndice do novo primario --> {len(peer_list)-1}", flush=True)

    # O prim√°rio antigo √© substitu√≠do pelo de maior n√∫mero
    primary_nodes[operation] = peer_list[len(peer_list)-1]
    print(f"[Rota elect_new_primary] | [{node_name}] | Novo primario: {primary_nodes[operation]}", flush=True)

    # Se o prim√°rio for o pr√≥prio n√≥, altera a flag daquela opera√ß√£o
    if node_name == primary_nodes[operation]:
        print(f"[Rota elect_new_primary] | [{node_name}] | Sou o novo prim√°rio de {operation}.\n", flush=True)
        is_primary[operation] = True

    # Retorna sucesso
    return "", 200

# Rota que atualiza o banco de dados de um determinado cliente. A rota √© ativada por um n√≥ que n√£o √© o prim√°rio de uma opera√ß√£o
@app.route("/refresh_database", methods=["POST"])
def refresh_database():
    global clients_database
    
    # Obtendo informa√ß√µes do cliente 
    data        = request.json        # Extra√ß√£o da mensagem
    client_name = data.get("name")    # Obtendo nome do servidor-cliente
    new_value   = data.get("value")   # Obtendo nome do servidor-cliente
    client_number = int(client_name.split("-")[-1]) # Obtendo a posi√ß√£o do cliente no banco
    
    print(f"[Rota refresh_database] | [{node_name}] |üì© Recebeu pedido de atualiza√ß√£o do servidor prim√°rio | Cliente [{client_name}] | Estado do banco: '{clients_database[client_number]}'", flush=True)
    # Escreve o novo valor no banco
    clients_database[client_number] = new_value
    
    print(f"[Rota refresh_database] | [{node_name}] |üìù Cliente [{client_name}] atualizado! | Estado do banco: '{clients_database[client_number]}'\n", flush=True)
    
    # Retorna o c√≥digo de sucesso
    return "", 200

# Rota que devolve a requisi√ß√£o de estabelecimento da conex√£o com os clientes
@app.route("/isalive", methods=["GET"])
def isalive():
    return "", 200

# =================== ROTAS PARA A INTERFACE WEB ===================

# Rota que devolve as informa√ß√µes dos n√≥s para o front-end. S√£o passados quem s√£os os prim√°rios de quais opera√ß√µes e as informa√ß√µes do banco de dados
@app.route("/")
def index():
    return render_template(
        "index.html",
        clients_database=clients_database,
        node_name=node_name,
        primary_node_create=primary_nodes[0],
        primary_node_update=primary_nodes[1],
        primary_node_delete=primary_nodes[2],
        is_primary_create=is_primary[0],
        is_primary_update=is_primary[1],
        is_primary_delete=is_primary[2]
    )

# Inicia o servidor Flask escutando em todas as interfaces, na porta 8080
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)